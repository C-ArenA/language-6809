# Syntax highlighting for vasm assembler toolchain
# See http://sun.hasenbraten.de/vasm/ for more information

scopeName: 'source.vasm68k'
name: '68k/68000 (vasmm68k_mot)'
fileTypes: [
  'asm'
  'x68'
  's'
]
patterns: [
  { include: 'source.68k-assembly' } # lwtools supports the 6309 instruction set
  { include: '#comments' } # Comments
  { include: '#symbols' } # Symbols, strings and numbers
  { include: '#directives' } # Assembler directives for lwtools
]

# start of repository
repository:

  # Comments supported by lwtools
  comments:
    patterns: [
      # pound symbol comments
      {
        match: ';.*$'
        name: 'comment.line.vasm68k'
      }
    ]

  # Number formats accepted by lwtools
  symbols:
    patterns: [
      # strings
      {
        begin: '"'
        beginCaptures:
          0:
            name: 'punctuation.definition.string.begin.vasm68k'
        end: '"'
        endCaptures:
          0:
            name: 'punctuation.definition.string.end.lwtools-toolchain'
        name: 'string.quoted.double.assembly.vasm68k'
      }
      # labels
      {
        captures:
          1: name: 'entity.name.function.label.vasm68k'
        match: '\\.?\\b([A-Za-z0-9_]+)\\$?::?'
        name: 'meta.function.label.vasm68k'
      }
      # # absolut
      {
        match: '\\#\\b([\\w0-9]+)\\b'
        name: 'constant.numeric.hex.vasm68k'
      }
      # hex, prefixed with ampersand($)
      {
        match: '\\#?-?\\$[A-Fa-f0-9]+'
        name: 'constant.numeric.hex.merlin'
      }
      # octal, prefixed with @
      {
        match: '\\#?@([0-7]+)\\b'
        name: 'constant.numeric.octal.merlin'
      }
      # binary
      {
        match: '\\#?%[01]+'
        name: 'constant.numeric.binary.merlin'
      }
      # decimal
      {
        match: '\\b([0-9]+)\\b'
        name: 'constant.numeric.decimal.merlin'
      }
    ]

  # assembler directives of lwtools
  directives:
    patterns: [
      # registers
      {
        match: '\\b(?i)([ad][0-7]|sp)\\b'
        name: 'storage.other.register.vasm68k'
      }
      # data directives
      {
        match: '\\.\\b(?i)(align|blk.[bdlqswx]|bss(_[cf])?|cargs|clr[fs]o|code(_[cf])?|comm|comment|cseg|data(_[cf])?|(dcb?|d[rs]).[bdlqswx]|dseg|echo|eininline|else|end|endif|endm|endr|equ(.[sdxp])?|erem|even|fail|fequ.[sdxp]|fo.[bwlqsdxp]|idnt|if(eq|ne|gt|ge|lt|n?[bcd]|macron?d)?|incbin|incdir|include|inline|list)\\b'
        name: 'support.function.pseudo.vasm68k'
      }
      # conditional
      {
        match: '(\\.)\\b(?i)(llen|macro|mexit|nolist|nopage|nref|odd|offset|org|output|page|plen|printt|printv|public|rem|rept|rorg|rsreset|rsset|section|set|setfo|setso|spc|text|ttl|weak|xdef|xref)\\b'
        name: 'support.function.pseudo.vasm68k'
      }
      # section shorts
      # {
      #   match: '(\\.)\\b(?i)(bss|data|rodata|sbss|sdata|sdata2|stab|stabstr|text|tocd)\\b'
      #   name: 'support.function.pseudo.vasm68k'
      # }
      # Operators
      {
        match: '\\*|\\/|\\-|\\+|\\^|\\+|!|<=?|>=?|=|\\~|\\%|\\||\\&'
        name: 'keyword.operator.crossware6809-toolchain'
      }
    ]
